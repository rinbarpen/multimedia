# .clang-format
# clang 排版配置文件
#
# * 配置参数修改参考文档
#   http://clang.llvm.org/docs/ClangFormatStyleOptions.html
#
# * 使用步骤：
#   将此文件放入工程根目录下，命名为 .clang-format
#
#
# * 若有不特殊的排版 clangformat 不支持，使用以下注释让 clang 跳过自动排版校验
#   // clang-format off
#   ... ...
#   // clang-format on
#
#

---
Language: Cpp                                       # this format style is targeted at. Cpp for c, c++, oc, oc++.
BasedOnStyle: Google
AccessModifierOffset: -2                            # 控制 @public ... 的左缩进，以 IndentWidth 为基准
AlignAfterOpenBracket: false                        #
AlignConsecutiveMacros: {                           #
  Enabled: true,                                     # 宏对齐
  AcrossEmptyLines: true,                            # 即使有空行也对齐
  AcrossComments: false,                             # 即使有注释也对齐
}
#AlignConsecutiveShortCaseStatements: {               #
#  Enabled: true,                                     # switch case 对齐
#  AcrossEmptyLines: true,                            #
#  AcrossComments: true,                              #
#  AlignCaseColons: false,                            # 以冒号对齐
#}
# AlignConsecutiveAssignments: true                 #
# AlignConsecutiveDeclarations: false               #
AlignEscapedNewlinesLeft: true                      # 宏的 \ 对齐
AlignOperands: true                                 # 多行操作符的语句，水平对齐
#AlignTrailingComments: {                            # 连续行，行尾注释对齐
#  Kind: Always,                                      #
#  OverEmptyLines: 2,                                 # 注释两空格对齐
#}
AllowAllArgumentsOnNextLine: true                   # 即使 BinPackParameters 为 false, 仍允许方法声明的多个参数不在同一行
#AllowBreakBeforeNoexceptSpecifier: Never            # noexcept对齐
AllowShortBlocksOnASingleLine: Empty                # 空 while {} 语句单行
AllowShortCaseLabelsOnASingleLine: true             # case 单行
#AllowShortCompoundRequirementOnASingleLine: true    # concept 单行
AllowShortEnumsOnASingleLine: true                  # enum 单行
AllowShortFunctionsOnASingleLine: Inline            # 方法单行 int f() { return 0; }
AllowShortIfStatementsOnASingleLine: WithoutElse    # if 语句没有else时，单行
AllowShortLambdasOnASingleLine: Inline              # lambda在函数中才是inline的
AllowShortLoopsOnASingleLine: true                  # 单行循环 while (true) continue;
AlwaysBreakAfterReturnType: None                    # 函数返回参数单独一行
AlwaysBreakBeforeMultilineStrings: false            #
AlwaysBreakTemplateDeclarations: Yes                # template<...> 后强制另起一行
BinPackArguments: true                              # false 时表示 c 方法调用强制全部在同一行，或者每一行只能有一个参数
BinPackParameters: true                             # false 时表示 c 方法声明强制全部在同一行，或者每一行只能有一个参数
BitFieldColonSpacing: After                         # 位域显示-> field: 2
BreakBeforeBraces: Custom                           # BreakBeforeBraces = Custom 时此参数起作用，自定义不同语义下的 { 是否单起一行策略
BraceWrapping: {
  AfterCaseLabel: true,                           #
  AfterClass: true,                               # class {  的 { 另起一行
  AfterControlStatement: false,                   # if { 的 { 另起一行
  AfterEnum: true,                                # enum { 的 { 另起一行
  AfterFunction: false,                           # aFunc { 的 { 另起一行
  AfterNamespace: true,                           # aNamespaece { 的 { 另起一行
  AfterStruct: true,
  AfterUnion: true,
  AfterExternBlock: true,
  BeforeCatch: true,
  BeforeElse: true,
  BeforeLambdaBody: false,
  BeforeWhile: false,
}
#BreakAdjacentStringLiterals: true                   #
#BreakAfterAttributes: Always                        # [[nodiscard]] \n xx
BreakBeforeBinaryOperators: NonAssignment           # = 不管
# BreakBeforeInheritanceComma: false                  # class 继承后的多个类，不强制分成多行，暂不支持
BreakInheritanceList: AfterColon                    #
BreakStringLiterals: true                           #
BreakBeforeTernaryOperators: true                   # ? : 如果换行时，强制 ? : 在行首
BreakConstructorInitializersBeforeComma: true       # cpp 构造函数变量构造强制对齐
ColumnLimit: 80                                              # 单行最长字符限制，0不限制
# CommentPragmas:  '^ IWYU pragma:'                         # 正则表达式所匹配的注释有特殊意义，不要换行和修改
ConstructorInitializerAllOnOneLineOrOnePerLine: false       # 构造函数单行或强制多行
ConstructorInitializerIndentWidth: 2                        # 构造函数缩进
ContinuationIndentWidth: 2                                  # [[AFNetworking share] xxx], xxx 单起一行时缩进
#Cpp11BracedListStyle: true                          # format braced lists as best suited for C++11 braced lists.
DerivePointerAlignment: false                       # 是否将 PointerAlignment 置为备选
ExperimentalAutoDetectBinPacking: false             #
FixNamespaceComments: true                          # namespace a { ... } 后补充注释 // namespace a  暂不支持
# ForEachMacros:                                    # code FOREACH(<variable-declaration>, ...)<loop-body>
IncludeCategories:                                       # 头文件排序规则，<> , "" 按字母排序
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        2
  - Regex:           '.\*'
    Priority:        1
IndentCaseLabels: false                             # 强制将 switch case 的 case 进行缩进
IndentRequiresClause: false
#InsertNewlineAtEOF: true
#IntegerLiteralSeparator: {
#  Binary: 4,
#  Decimal: 3,
#  Hex: -1,
#}
KeepEmptyLinesAtTheStartOfBlocks: true              # 一个代码块开头如果是空行，是否保留
#MacroBlockBegin: "^[A-Z_]+_BEGIN$"                  # block 宏开始正则匹配
#MacroBlockEnd: "^[A-Z_]+_END$"                      # block 宏结束正则匹配
MaxEmptyLinesToKeep: 3                              # 最多允许几个连续空行
NamespaceIndentation: None                          # namespace 是否缩进
PenaltyBreakBeforeFirstCallParameter: 19            # The penalty for breaking a function call after `call(`.
PenaltyBreakComment: 300                            # The penalty for each line break introduced inside a comment.
PenaltyBreakString: 1000                            # The penalty for each line break introduced inside a string literal.
PenaltyBreakFirstLessLess: 120                      # The penalty for breaking before the first <<.
PenaltyExcessCharacter: 1000000                     # The penalty for each character outside of the column limit.
PenaltyReturnTypeOnItsOwnLine: 60                   # Penalty for putting the return type of a function onto its own line.
PointerAlignment: Right                             # 指针、引用标识贴着变量名 int *a;  <- int* a;
ReferenceAlignment: Right
PPIndentWidth: 1
PackConstructorInitializers: NextLine
ReflowComments: true                                # 注释多行时重排列
SortIncludes: CaseSensitive                         # 对连续的 include 行进行排序
SpaceAfterCStyleCast: true                          # c 式类型强转之后是否添加空格 (double)a <- (double) a
SpaceAfterTemplateKeyword: true                     # template<int>, template 后插入空格
SpaceBeforeAssignmentOperators: true                # = 号前是否加空格
SpaceBeforeParens: ControlStatements                # 什么时候在括号前插入空格，if (booleanValue), void f() , f()
SpaceInEmptyParentheses: false                      # 空参数方法调用() 中是否插入空格  f() <- f( )
SpacesBeforeTrailingComments: 2                     # 行尾注释 // 之前添加几个空格  ; //  <-  ;//
SpacesInAngles: false                               # < 后 > 前是否插入空格, std::function<void(int)> fct;
SpacesInCStyleCastParentheses: false                # c 式类型强转之后是否添加空格 x = (int32)y  <- x = ( int32 )y
SpacesInContainerLiterals: true                     # @[], @{} 等容器前后是否插入空格 [ 1, 2, 3 ];  <- [1, 2, 3];
SpacesInParentheses: false                          # ( 后 ) 前是否插入空格, t f( Deleted & ) & = delete;  ->  t f(Deleted &) & = delete;
SpacesInSquareBrackets: false                       # [ 后 ] 前是否插入空格
TabWidth: 2                                         # Tab 宽度
UseTab: Never                                       # 保留 Tab 或者用空格替换
#QualifierOrder: ['inline', 'static', 'const', 'constexpr', 'type' ]
Standard: c++17                                      # 语言标准 c++11 c++17 c++20 Auto
